#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2966 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 7 #"racquel"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 15 #"scribble/manual"
0 0 24 3 1 #" "
0 0 14 3 13 #"scribble/eval"
0 0 24 3 1 #" "
0 0 14 3 12 #"scribble/bnf"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"for-label"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"for-syntax"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/class"
0 0 24 3 1 #" "
0 0 14 3 16 #"racket/serialize"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 5 #"title"
0 0 24 3 1 #"{"
0 0 20 3 47 #"Racquel: An Object/Relational Mapper for Racket"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 20 3 85
(
 #"Racquel is an object/relational mapper for Racket. It consists of se"
 #"veral components."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"itemlist"
0 0 24 3 2 #"[@"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 88
(
 #"An extension of Racket's class system that allows mapping of databas"
 #"e tables to classes."
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 93
(
 #"A generator that automatically creates mapped classes using database"
 #" schema, including joins."
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 82
(
 #"Persistence functions for selecting, saving, and deleting objects in"
 #" the database."
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 46 #"An S-expression based SQL-like query language."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 58
#"Functions for serializing objects to and from JSON or XML."
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"Racquel supports connectivity to all the database systems provided b"
 #"y Racket's "
) 0 0 24 3 1 #"@"
0 0 14 3 4 #"link"
0 0 24 3 1 #"["
0 0 19 3 33 #"\"http://docs.racket-lang.org/db/\""
0 0 24 3 2 #"]{"
0 0 20 3 2 #"DB"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 95
(
 #"package, which are: MySQL, PostgreSQL, SQLite3, and through ODBC: SQ"
 #"L Server, Oracle, and DB/2."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 51 #"Racquel can be used by installing the package from "
0 0 24 3 1 #"@"
0 0 14 3 4 #"link"
0 0 24 3 1 #"["
0 0 19 3 37 #"\"https://github.com/brown131/racquel\""
0 0 24 3 2 #"]{"
0 0 20 3 6 #"GitHub"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 81
(
 #"Or, as of Racket 6.0, it can be downloaded using the Package Manager"
 #" in DrRacket."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 9 #"defmodule"
0 0 24 3 1 #"["
0 0 14 3 7 #"racquel"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"dataclass\""
0 0 24 3 2 #"]{"
0 0 20 3 18 #"Data Class Mapping"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 20 3 64
#"Mapping of Racket classes to database tables is performed using "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #"]"
0 0 20 3 25 #", which extends a Racket "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 15 3 5 #"class"
0 0 24 3 1 #"]"
0 0 20 3 5 #" with"
0 0 24 29 1 #"\n"
0 0 20 3 97
(
 #"expressions for mapping a database table and columns to the data cla"
 #"ss. Below is an example of a "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #"]"
0 0 20 3 13 #" with mapping"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"expressions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"vehicle%"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"data-class"
0 0 24 3 1 #" "
0 0 14 3 7 #"object%"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Vehicle\""
0 0 24 3 26 #")                         "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"column"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vehicle-id"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Vehicle_Id\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Make\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"year"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Year\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"axels"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Axels\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"primary-key"
0 0 24 3 1 #" "
0 0 14 3 10 #"vehicle-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"join"
0 0 24 3 1 #" "
0 0 14 3 5 #"owner"
0 0 24 3 1 #" "
0 0 14 3 9 #"customer%"
0 0 24 3 1 #" "
0 0 23 3 13 #"#:cardinality"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"one-to-one"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"customer%"
0 0 24 3 1 #" "
0 0 14 3 11 #"customer-id"
0 0 24 3 3 #") ("
0 0 14 3 8 #"vehicle%"
0 0 24 3 1 #" "
0 0 14 3 11 #"customer-id"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 6 #"wheels"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-field"
0 0 24 3 1 #" "
0 0 14 3 5 #"axels"
0 0 24 3 1 #" "
0 0 14 3 4 #"this"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 55 #"Here a database table named \"Vehicle\" is mapped to the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 8 #"vehicle%"
0 0 24 3 1 #"]"
0 0 20 3 52 #" data class. Columns are defined mapping the columns"
0 0 24 29 1 #"\n"
0 0 20 3 128
(
 #"of the table to a field of the data class, as well as default value "
 #"for the field. There is also an expression which defines the"
) 0 0 24 29 1 #"\n"
0 0 20 3 46 #"primary key. This table also has a join field "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"owner"
0 0 24 3 1 #"]"
0 0 20 3 38 #" which defines a one-to-one join to a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 9 #"customer%"
0 0 24 3 1 #"]"
0 0 20 3 8 #" object."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 12 #"defform/subs"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 23 3 10 #"#:literals"
0 0 24 3 2 #" ("
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"init-column"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #" "
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 4 #"join"
0 0 24 3 1 #" "
0 0 14 3 11 #"primary-key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"data-class*"
0 0 24 3 1 #" "
0 0 14 3 15 #"superclass-expr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"interface-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 17 #"data-class-clause"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(["
0 0 14 3 17 #"data-class-clause"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 13 #"external-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"init-column"
0 0 24 3 1 #" "
0 0 14 3 11 #"column-decl"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"column"
0 0 24 3 1 #" "
0 0 14 3 11 #"column-decl"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"join"
0 0 24 3 1 #" "
0 0 14 3 13 #"join-table-id"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-decl"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"primary-key"
0 0 24 3 1 #" "
0 0 14 3 16 #"primary-key-decl"
0 0 24 3 1 #" "
0 0 14 3 17 #"auto-increment-kw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 12 #"class-clause"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 16 #"init-column-decl"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"maybe-renamed"
0 0 24 3 1 #" "
0 0 14 3 16 #"column-name-decl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"maybe-renamed"
0 0 24 3 1 #" "
0 0 15 3 18 #"default-value-expr"
0 0 24 3 1 #" "
0 0 14 3 16 #"column-name-decl"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 11 #"column-decl"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"maybe-renamed"
0 0 24 3 1 #" "
0 0 15 3 18 #"default-value-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"column-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 13 #"maybe-renamed"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"internal-id"
0 0 24 3 1 #" "
0 0 14 3 11 #"external-id"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 16 #"column-name-decl"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 11 #"column-name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"column-name"
0 0 24 3 1 #" "
0 0 14 3 13 #"external-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 9 #"join-decl"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"join-name"
0 0 24 3 1 #" "
0 0 14 3 15 #"joined-table-id"
0 0 24 3 1 #" "
0 0 14 3 14 #"cardinality-kw"
0 0 24 3 1 #" "
0 0 14 3 12 #"where-clause"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 14 #"cardinality-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 13 #"#:cardinality"
0 0 24 3 1 #" "
0 0 14 3 16 #"cardinality-expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 16 #"primary-key-decl"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"column-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"column-ids"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 17 #"auto-increment-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 16 #"#:auto-increment"
0 0 24 3 1 #" "
0 0 14 3 19 #"auto-increment-expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"Produces a data class value used for persisting data objects from a "
 #"database."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #"]"
0 0 20 3 90
(
 #" expression is a string that names the database table that the data "
 #"class is mapped to. An"
) 0 0 24 29 1 #"\n"
0 0 20 3 103
(
 #"optional external class name can also be defined. This external name"
 #" is used when the class is exported"
) 0 0 24 29 1 #"\n"
0 0 20 3 51 #"to JSON or XML using the Racquel data class mixins."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"column"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 11 #"init-column"
0 0 24 3 1 #"]"
0 0 20 3 24 #" are analogous to class "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"field"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"init-field"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 115
(
 #"expressions. The difference being that columns are mapped to columns"
 #" of a database and are persistent. A data class"
) 0 0 24 29 1 #"\n"
0 0 20 3 17 #"may also contain "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"field"
0 0 24 3 1 #"]"
0 0 20 3 87
(
 #" columns, but the fields, as they are not mapped to database columns"
 #" are not persisted."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 58
#"Data classes can map joins to other data classes, using a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"join"
0 0 24 3 1 #"]"
0 0 20 3 39 #" expression so that objects related to "
0 0 24 29 1 #"\n"
0 0 20 3 115
(
 #"the object can be contained as part of the object.  For example a jo"
 #"in can be defined so that a field of the object"
) 0 0 24 29 1 #"\n"
0 0 20 3 107
(
 #"can contain a list of order for a customer. The path of a the join i"
 #"s defined using an RQL expression (see "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"secref"
0 0 24 3 1 #"["
0 0 19 3 5 #"\"rql\""
0 0 24 3 1 #"]"
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 20 3 123
(
 #"which allows for considerable flexibility in regard to what the cont"
 #"ained objects are, e.g. a join could be defined so that"
) 0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"only customer order in the last six months are contained in the obje"
 #"ct. The cardinality of the join is also definable using a"
) 0 0 24 29 1 #"\n"
0 0 20 3 54 #"keyword. Valid values for the cardinality keyword are "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 10 #"one-to-one"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 11 #"one-to-many"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 113
(
 #"Joined objects are loaded lazily, that is, they are not loaded from "
 #"the database until they are first referenced."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 11 #"primary-key"
0 0 24 3 1 #"]"
0 0 20 3 101
(
 #" expression defines the primary key for the mapped table. If a prima"
 #"ry key consists of multiple parts"
) 0 0 24 29 1 #"\n"
0 0 20 3 64
#"then the columns must be defined in a list. An optional keyword "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 16 #"#:auto-increment"
0 0 24 3 1 #"]"
0 0 20 3 33 #" can be used to indicate that the"
0 0 24 29 1 #"\n"
0 0 20 3 107
(
 #"primary key is an auto-incrementing a.k.a. identity column. Typicall"
 #"y the value for this keyword is simply "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 29 1 #"\n"
0 0 20 3 120
(
 #"however if the type of database being mapped to is PostgreSQL or Ora"
 #"cle, then the value of the keyword must be a string "
) 0 0 24 29 1 #"\n"
0 0 20 3 66
#"defining the name of the sequence entity being used for the table."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"A "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #"]"
0 0 20 3 25 #" automatically defines a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"inspect"
0 0 24 3 1 #"]"
0 0 20 3 17 #" with a value of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 20 3 23 #", as class transparancy"
0 0 24 29 1 #"\n"
0 0 20 3 61
#"is necessary for persistent mechanism. Therefore defining an "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"inspect"
0 0 24 3 1 #"]"
0 0 20 3 39 #" expression will generate an error that"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"an "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"inspect"
0 0 24 3 1 #"]"
0 0 20 3 37 #" expression has already been defined."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defform"
0 0 24 3 2 #"[("
0 0 14 3 10 #"data-class"
0 0 24 3 1 #" "
0 0 14 3 15 #"superclass-expr"
0 0 24 3 1 #" "
0 0 14 3 12 #"class-clause"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 25 #"This is analagous to the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 15 3 5 #"class"
0 0 24 3 1 #"]"
0 0 20 3 98
(
 #" definition, where the interface expression is omitted.             "
 #"                              "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 11 #"data-class?"
0 0 24 3 2 #" ["
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 3 #"]) "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 8 #"Returns "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 20 3 4 #" if "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 20 3 19 #" is a dtata class, "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 20 3 11 #" otherwise."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 15 #"data-class-info"
0 0 24 3 2 #" ["
0 0 15 3 5 #"class"
0 0 24 3 1 #" "
0 0 14 3 11 #"data-class?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 16 #"member-name-key?"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 16 #"member-name-key?"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 7 #"string?"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))]{"
0 0 24 29 1 #"\n"
0 0 20 3 55 #"Returns eight values, analogous to the returnvalues of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"class-info"
0 0 24 3 1 #"]"
0 0 20 3 1 #":"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"itemize"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 13 #"_class-id-key"
0 0 24 3 1 #"]"
0 0 20 3 52 #": the hidden name for the class's metadata id field;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"_state-key"
0 0 24 3 1 #"]"
0 0 20 3 46 #": the hidden name for the class's state field;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 11 #"_table-name"
0 0 24 3 1 #"]"
0 0 20 3 40 #": the database table name for the class;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 8 #"_columns"
0 0 24 3 1 #"]"
0 0 20 3 58
#": a list of column definition lists. Each column defintion"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 101
(
 #"consists of the column field, the database column name, and the exte"
 #"rnal name used for serialization;"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"_joins"
0 0 24 3 1 #"]"
0 0 20 3 55 #": a list of join definition lists. Each join definition"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 71
(
 #"consists of the join field, the data class of the object(s) joined t"
 #"o, "
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 24 #"the cardinality (either "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 10 #"one-to-one"
0 0 24 3 1 #"]"
0 0 20 3 4 #" or "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 11 #"one-to-many"
0 0 24 3 1 #"]"
0 0 20 3 40 #", and the RQL where-clause for the join;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 12 #"_primary-key"
0 0 24 3 1 #"]"
0 0 20 3 70
(
 #": either an field or a list of fields that constitute the primary ke"
 #"y;"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 18 #"_autoincrement-key"
0 0 24 3 1 #"]"
0 0 20 3 9 #": set to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 20 3 44 #" if the primary key is an auto-increment key"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 20 3 102
(
 #"(unless the database system is PostgreSQL or Oracle, in which case i"
 #"t is the name of the sequence used"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 20 3 21 #"for the primary key);"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 13 #"_external-nam"
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 20 3 52 #": the external name used for JSON/XML serialization;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"]}"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"generation\""
0 0 24 3 2 #"]{"
0 0 20 3 31 #"Automated Data Class Generation"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 24 29 1 #"\n"
0 0 20 3 57 #"A powerful feature of Racquel is the ability to generate "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #"]"
0 0 20 3 30 #" mappings automatically using "
0 0 24 29 1 #"\n"
0 0 20 3 91
(
 #"database schema metadata. This allows for data classes to be defined"
 #" for all the tables in "
) 0 0 24 29 1 #"\n"
0 0 20 3 70
(
 #"a database without the tedious effort of manually coding the mapping"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 12 #"defform/subs"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 23 3 10 #"#:literals"
0 0 24 3 2 #" ("
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"init-column"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #" "
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 4 #"join"
0 0 24 3 1 #" "
0 0 14 3 11 #"primary-key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"gen-data-class"
0 0 24 3 1 #" "
0 0 14 3 13 #"db-connection"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 10 #"table-name"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 16 #"#:db-system-type"
0 0 24 3 1 #" "
0 0 14 3 17 #"db-system-type-kw"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 17 #"#:generate-joins?"
0 0 24 3 1 #" "
0 0 14 3 17 #"generate-joins-kw"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 25 #"#:generate-reverse-joins?"
0 0 24 3 1 #" "
0 0 14 3 25 #"generate-reverse-joins-kw"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 13 #"#:schema-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"schema-name"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 10 #"#:inherits"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-class"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 23 #"#:table-name-normalizer"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 24 #"#:column-name-normalizer"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 22 #"#:join-name-normalizer"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 25 #"#:table-name-externalizer"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 8 #"#:print?"
0 0 24 3 1 #" "
0 0 14 3 8 #"print-kw"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 23 3 10 #"#:prepare?"
0 0 24 3 1 #" "
0 0 14 3 10 #"prepare-kw"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 17 #"data-class-clause"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(["
0 0 14 3 17 #"db-system-type-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 16 #"#:db-system-type"
0 0 24 3 1 #" "
0 0 14 3 14 #"db-system-type"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 17 #"generate-joins-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 17 #"#:generate-joins?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 25 #"generate-reverse-joins-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 25 #"#:generate-reverse-joins?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 14 #"schema-name-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 13 #"#:schema-name"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 11 #"inherits-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:inherits"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 24 #"table-name-normalizer-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 23 #"#:table-name-normalizer"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 25 #"column-name-normalizer-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 24 #"#:column-name-normalizer"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 23 #"join-name-normalizer-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 22 #"#:join-name-normalizer"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 26 #"table-name-externalizer-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 25 #"#:table-name-externalizer"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"["
0 0 14 3 8 #"print-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:print?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 42 #"Generates a data class from the specified "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #"]"
0 0 20 3 11 #" using the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #"]"
0 0 20 3 57 #". If the database system type is an ODBC connection, then"
0 0 24 29 1 #"\n"
0 0 20 3 54 #"the particular system type can be specified using the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 16 #"#:db-system-type"
0 0 24 3 1 #"]"
0 0 20 3 64
#" keyword. (This is not necessary if the database system type has"
0 0 24 29 1 #"\n"
0 0 20 3 32 #"already been defined by calling "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 23 #"set-odbc-dbsystem-type!"
0 0 24 3 1 #"]"
0 0 20 3 9 #". If the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 16 #"#:db-system-type"
0 0 24 3 1 #"]"
0 0 20 3 7 #" is not"
0 0 24 29 1 #"\n"
0 0 20 3 64
#"specified, then the database system type is determined from the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 13 #"dbsystem-name"
0 0 24 3 1 #"]"
0 0 20 3 7 #" of the"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #"]"
0 0 20 3 12 #", where the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 4 #"odbc"
0 0 24 3 1 #"]"
0 0 20 3 46 #" database system is aassumed to be SQL Server."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 15 #"generate-joins?"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 22 #"generate-reverse-joins"
0 0 24 3 1 #"]"
0 0 20 3 22 #" keywords control the "
0 0 24 29 1 #"\n"
0 0 20 3 103
(
 #"automatic generation of joins and reverse joins. Joins are determine"
 #"d based on foreign key constraints "
) 0 0 24 29 1 #"\n"
0 0 20 3 101
(
 #"in the database, and reverse joins are based on any foreign key cont"
 #"raints referencing it. By default"
) 0 0 24 29 1 #"\n"
0 0 20 3 47 #"joins are generated, but reverse joins are not."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 103
(
 #"In some cases, the table name may not be unique in the database serv"
 #"er's metadata. In those cases, the "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 11 #"schema-name"
0 0 24 3 1 #"]"
0 0 20 3 61
#" can be used to specify the schema that the table resides in."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 70
(
 #"The base class of the generated data class can be specified using th"
 #"e "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 10 #"#:inherits"
0 0 24 3 1 #"]"
0 0 20 3 13 #" keyword. The"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"default base-class is "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"object%"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 105
(
 #"Behavior of the map generation can be controlled by customizing the "
 #"normalizer procedures which normalize"
) 0 0 24 29 1 #"\n"
0 0 20 3 104
(
 #"database names into Racket symbols. Generation of external names fro"
 #"m the symbol can also be controlled "
) 0 0 24 29 1 #"\n"
0 0 20 3 99
(
 #"using the externalizer procedures. A normalizer or externalizer can "
 #"be customized by specifying the"
) 0 0 24 29 1 #"\n"
0 0 20 3 105
(
 #"procedure to use with the appropriate keyword. An example of a situa"
 #"tion where one would want to override"
) 0 0 24 29 1 #"\n"
0 0 20 3 78
(
 #"the default normalizers is if table names in a database started with"
 #" a prefix."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 52 #"Below are the default normalizers and externalizers."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 21 #"table-name-normalizer"
0 0 24 3 2 #" ["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 4 #"]) ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 99
(
 #"This normalizer converts database table names into Racket class name"
 #"s, using a set of rules. First,"
) 0 0 24 29 1 #"\n"
0 0 20 3 104
(
 #"the normalizer will convert mixed-case names, e.g. \"MixedCase\", an"
 #"d make the all lower-case with hyphens"
) 0 0 24 29 1 #"\n"
0 0 20 3 103
(
 #"between the names, e.g. \"mixed-case\". It will then convert any und"
 #"erscores to hyphens. Finally, it will"
) 0 0 24 29 1 #"\n"
0 0 20 3 99
(
 #"append a percent sign to the end of the name, since that is the Rack"
 #"et standard for naming classes."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 21 #"table-name-normalizer"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"ExampleTable_Name\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 19 #"example-table-name%"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 50 #"This is default normalizer for table names if the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 25 #"#:table-name-externalizer"
0 0 24 3 1 #"]"
0 0 20 3 26 #" keyword is not specified."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 22 #"column-name-normalizer"
0 0 24 3 2 #" ["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 4 #"]) ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 89
(
 #"This converts column names of a table into Racket symbols, following"
 #" a set of rules. The "
) 0 0 24 29 1 #"\n"
0 0 20 3 35 #"rules are similar to those for the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 21 #"table-name-normalizer"
0 0 24 3 1 #"]"
0 0 20 3 42 #". First mixed-case names are converted to "
0 0 24 29 1 #"\n"
0 0 20 3 67
#"lower-case with hyphens, then underscores are converted to hyphens."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 22 #"column-name-normalizer"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"ExampleColumn_Name\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 19 #"example-column-name"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 50 #"This is default normalizer for table names if the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 26 #"#:column-name-externalizer"
0 0 24 3 1 #"]"
0 0 20 3 26 #" keyword is not specified."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 20 #"join-name-normalizer"
0 0 24 3 2 #" ["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 4 #"]) ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 84
(
 #"This converts joined table names into Racket symbols, following a se"
 #"t of rules. The "
) 0 0 24 29 1 #"\n"
0 0 20 3 35 #"rules are similar to those for the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 22 #"column-name-normalizer"
0 0 24 3 1 #"]"
0 0 20 3 42 #". First mixed-case names are converted to "
0 0 24 29 1 #"\n"
0 0 20 3 108
(
 #"lower-case with hyphens, then underscores are converted to hyphens. "
 #"Also, if the cardinality of the join is "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 11 #"one-to-many"
0 0 24 3 1 #"]"
0 0 20 3 83
(
 #", an \"s\" is appended to the end of the name (or \"es\" if the name"
 #" ends with an \"s\".)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 20 #"join-name-normalizer"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"JoinExample_Address\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 22 #"join-example-addresses"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 50 #"This is default normalizer for table names if the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 24 #"#:join-name-externalizer"
0 0 24 3 1 #"]"
0 0 20 3 26 #" keyword is not specified."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 23 #"table-name-externalizer"
0 0 24 3 2 #" ["
0 0 14 3 10 #"table-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 4 #"]) ("
0 0 14 3 7 #"string?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 132
(
 #"Converts a database table name to an external name for JSON or XML s"
 #"erialization. The default is no change at all to the table name."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 23 #"set-odbc-dbsystem-type!"
0 0 24 3 2 #" ["
0 0 14 3 13 #"odbc-sys-type"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"sqlserver"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"oracle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"db2"
0 0 24 3 5 #")]) ("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 129
(
 #"If the database system being used is either Oracle or DB/2, then the"
 #" database system type needs to be set to distinquish the ODBC"
) 0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"connection from a SQL Server connection, which is assumed for an ODB"
 #"C connection is it is not sepcified using this procedure."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"persistence\""
0 0 24 3 2 #"]{"
0 0 20 3 23 #"Data Object Persistence"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 16 #"make-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"data-class?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 11 #"primary-key"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 11 #"identifier?"
0 0 24 3 6 #"))]) ("
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 53 #"Loads a data object from the database by primary key."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 16 #"save-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 132
(
 #"Saves a data object into the database connected to. This will either"
 #" insert this object into the database, if the object's state is "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 3 #"new"
0 0 24 3 1 #"]"
0 0 20 3 3 #" or"
0 0 24 29 1 #"\n"
0 0 20 3 87
(
 #"update if the object has been previously loaded. The object's state "
 #"will be changed to "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 5 #"saved"
0 0 24 3 1 #"]"
0 0 20 3 186
(
 #".                                                                   "
 #"                                                                    "
 #"                                                  "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"insert-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 92
(
 #"Inserts a data object into the database connected to. The object's s"
 #"tate will be changed to "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 5 #"saved"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"update-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #"])("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 92
(
 #"Updates a data object into the database connected to. The object's s"
 #"tate will be changed to "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 5 #"saved"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"delete-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #"])("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 89
(
 #"Deletes a data object from the connected database. The object's stat"
 #"e will be changed to "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 7 #"deleted"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"select-data-object"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"data-class?"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 8 #"print-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:print?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 10 #"prepare-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:prepare?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 11 #"join-clause"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #"] "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ["
0 0 14 3 12 #"where-clause"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 3 #"] ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #"] "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 97
(
 #"Loads a data object from the database connected to using the criteri"
 #"a defined by the where and/or"
) 0 0 24 29 1 #"\n"
0 0 20 3 53 #"join RQL clauses. The object's initial state will be "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 6 #"loaded"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 13 #"The optional "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 1 #"#"
0 0 23 3 7 #":print?"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 7 #"keyword"
0 0 20 3 1 #" "
0 0 20 3 2 #"if"
0 0 20 3 1 #" "
0 0 20 3 4 #"true"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"will"
0 0 20 3 1 #" "
0 0 20 3 6 #"return"
0 0 20 3 1 #" "
0 0 20 3 4 #"only"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 3 #"SQL"
0 0 20 3 1 #" "
0 0 20 3 9 #"generated"
0 0 20 3 1 #" "
0 0 20 3 4 #"from"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"RQL."
0 0 20 3 1 #" "
0 0 20 3 4 #"This"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 6 #"useful"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 11 #" debugging."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 9 #"optional "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 10 #"#:prepare?"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 7 #"keyword"
0 0 20 3 1 #" "
0 0 20 3 2 #"if"
0 0 20 3 1 #" "
0 0 20 3 4 #"true"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"will"
0 0 20 3 1 #" "
0 0 20 3 5 #"force"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 3 #"SQL"
0 0 20 3 1 #" "
0 0 20 3 9 #"statement"
0 0 20 3 1 #" "
0 0 20 3 9 #"generated"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 6 #"cached"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"prepared"
0 0 20 3 1 #" "
0 0 20 3 11 #"statement. "
0 0 24 29 1 #"\n"
0 0 20 3 4 #"This"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 6 #"useful"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 3 #"RQL"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 3 #"may"
0 0 20 3 1 #" "
0 0 20 3 4 #"have"
0 0 20 3 1 #" "
0 0 20 3 8 #"variable"
0 0 20 3 1 #" "
0 0 20 3 6 #"inputs"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"such"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"list"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 2 #"an"
0 0 20 3 1 #" "
0 0 20 3 4 #"RQL "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 2 #"in"
0 0 24 3 1 #"]"
0 0 20 3 7 #" cause."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 19 #"select-data-objects"
0 0 24 3 2 #" ["
0 0 14 3 13 #"db-connection"
0 0 24 3 1 #" "
0 0 14 3 11 #"connection?"
0 0 24 3 3 #"] ["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"data-class?"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 8 #"print-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:print?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 10 #"prepare-kw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"code:line"
0 0 24 3 3 #") ("
0 0 14 3 9 #"code:line"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:prepare?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 11 #"join-clause"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #"] "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ["
0 0 14 3 12 #"where-clause"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 3 #"] ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #"] "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 96
(
 #"Loads data objects from the database connected to using the criteria"
 #" defined by the where and/or"
) 0 0 24 29 1 #"\n"
0 0 20 3 54 #"join RQL clauses. Each object's initial state will be "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 6 #"loaded"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 13 #"The optional "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 8 #"#:print?"
0 0 24 3 1 #"]"
0 0 20 3 96
(
 #" keyword if true, will return only the SQL generated from the RQL. T"
 #"his is useful for debugging."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 13 #"The optional "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 10 #"#:prepare?"
0 0 24 3 1 #"]"
0 0 20 3 99
(
 #" keyword if true, will force the SQL statement generated to not be c"
 #"ached as a prepared statement. "
) 0 0 24 29 1 #"\n"
0 0 20 3 78
(
 #"This is useful for RQL that may have variable inputs, such a a list "
 #"in an RQL "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 2 #"in"
0 0 24 3 1 #"]"
0 0 20 3 7 #" cause."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 17 #"data-object-state"
0 0 24 3 2 #" ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"loaded"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"saved"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"deleted"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 45 #"Returns the current state of the data object."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"itemize"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 3 #"new"
0 0 24 3 1 #"]"
0 0 20 3 84
(
 #": the state of a data object that has been created but never stored "
 #"in the database;"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 6 #"loaded"
0 0 24 3 1 #"]"
0 0 20 3 68
#": the state of a data object that has been loaded from the database;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 5 #"saved"
0 0 24 3 1 #"]"
0 0 20 3 77
(
 #": the state of a data object that has been saved to the database aft"
 #"er being "
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 20 3 49 #"either newly created or loaded from the database;"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 7 #"deleted"
0 0 24 3 1 #"]"
0 0 20 3 69
(
 #": the state of a data object that has been deleted from the database"
 #";"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 10 #"get-column"
0 0 24 3 2 #" ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"any/c"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 55 #"Gets the value of a data object's column, analogous to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 9 #"get-field"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 11 #"set-column!"
0 0 24 3 2 #" ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"void?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 55 #"Sets the value of a data object's column, analogous to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"set-field!"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 8 #"get-join"
0 0 24 3 2 #" ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #"] ["
0 0 14 3 11 #"data-object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"any/c"
0 0 24 3 4 #"))]{"
0 0 24 29 1 #"\n"
0 0 20 3 99
(
 #"Gets the value of a data object join. The value of thie join field i"
 #"s loaded from the database upon"
) 0 0 24 29 1 #"\n"
0 0 20 3 46 #"first call. (This is known as \"lazy\" loading.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 20 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rql\""
0 0 24 3 2 #"]{"
0 0 20 3 31 #"RQL: The Racquel Query Language"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 89
(
 #"The RQL query language defines SQL-like S-expressions. The expressio"
 #"ns are used to define"
) 0 0 24 29 1 #"\n"
0 0 20 3 52 #"selection criteria when loading data objects (using "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 18 #"select-data-object"
0 0 24 3 1 #"]"
0 0 20 3 4 #" or "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 19 #"select-data-objects"
0 0 24 3 1 #"]"
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 20 3 40 #"or joining to other data objects (using "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"join"
0 0 24 3 1 #"]"
0 0 20 3 70
(
 #"s). RQL-expressions are translated into database system-specific SQL"
 #". "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 120
(
 #"Rather than naming a table in a query, as in an SQL, a class which m"
 #"aps to a table is named instead. For instance if the"
) 0 0 24 29 1 #"\n"
0 0 20 3 40 #"table \"INVOICE\" was mapped to the class "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 8 #"invoice%"
0 0 24 3 1 #"]"
0 0 20 3 11 #", the name "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 8 #"invoice%"
0 0 24 3 1 #"]"
0 0 20 3 36 #" would be using the an RQL query. In"
0 0 24 29 1 #"\n"
0 0 20 3 109
(
 #"addition, columns in RQL as identified using a pair with class name "
 #"and field name. This the SQL table-column"
) 0 0 24 29 1 #"\n"
0 0 20 3 37 #"reference \"INVOICE.CREATED\" would be "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 8 #"invoice%"
0 0 24 3 1 #" "
0 0 14 3 7 #"created"
0 0 24 3 2 #")]"
0 0 20 3 62
#". A column name must be defined in RQL with it's corresponding"
0 0 24 29 1 #"\n"
0 0 20 3 64
#"class, in order to be correctly mapped to the corresponding SQL."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 60
#"RQL query parameters are represented using a question mark ("
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"?"
0 0 24 3 1 #"]"
0 0 20 3 51 #"). Since the representation of parameter values can"
0 0 24 29 1 #"\n"
0 0 20 3 129
(
 #"be database system specific, it is recommended that parameters be us"
 #"ed rather than actual hard-coded values, as to ensure correct"
) 0 0 24 29 1 #"\n"
0 0 20 3 64
#"mapping of the value into the specific database system's format."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"syntax\""
0 0 24 3 2 #"]{"
0 0 20 3 12 #"Syntax forms"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 37 #"Below is the BNF for RQL expressions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 1 #"("
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 5 #"close"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 1 #")"
0 0 24 3 3 #"}])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 3 #"BNF"
0 0 24 3 2 #"[("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 16 #"                "
0 0 24 3 3 #"} @"
0 0 14 3 7 #"litchar"
0 0 24 3 3 #"{})"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 10 #"expression"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 4 #"join"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 10 #"table name"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"search condition"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 5 #"where"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"search condition"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"search condition"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean term"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 2 #"or"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"search condition"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean term"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean term"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"boolean factor"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 3 #"and"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean term"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"boolean factor"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"boolean factor"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 3 #"not"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean test"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"boolean test"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 15 #"boolean primary"
0 0 24 3 3 #"}])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 15 #"boolean primary"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 9 #"predicate"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"search condition"
0 0 24 3 3 #"}])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 9 #"predicate"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 20 #"comparison predicate"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 17 #"between predicate"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"in predicate"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"like predicate"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"null predicate"
0 0 24 3 3 #"}])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 17 #"between predicate"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 7 #"between"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 21 #"row value constructor"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 21 #"row value constructor"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 21 #"row value constructor"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 12 #"in predicate"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 2 #"in"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 21 #"row value constructor"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 13 #"in value list"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 13 #"in value list"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 2 #"[@"
0 0 14 3 10 #"kleeneplus"
0 0 24 3 2 #"[@"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 16 #"value expression"
0 0 24 3 4 #"}]])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 14 #"like predicate"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              @"
0 0 14 3 7 #"BNF-seq"
0 0 24 3 1 #"["
0 0 14 3 4 #"open"
0 0 24 3 2 #" @"
0 0 14 3 7 #"litchar"
0 0 24 3 1 #"{"
0 0 20 3 4 #"like"
0 0 24 3 3 #"} @"
0 0 14 3 7 #"nonterm"
0 0 24 3 1 #"{"
0 0 20 3 7 #"pattern"
0 0 24 3 2 #"} "
0 0 14 3 5 #"close"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"where\""
0 0 24 3 2 #"]{"
0 0 20 3 16 #"The where clause"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"A "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"where"
0 0 24 3 1 #"]"
0 0 20 3 19 #" clause is used in "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 18 #"select-data-object"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 19 #"select-data-objects"
0 0 24 3 1 #"]"
0 0 20 3 16 #". It follows the"
0 0 24 29 1 #"\n"
0 0 20 3 119
(
 #"behavior of SQL-expressions, which can include AND, OR, =, IN, LIKE,"
 #" etc., but are expressed as S-expressions. Thus the"
) 0 0 24 29 1 #"\n"
0 0 20 3 70
(
 #"SQL-expression \"ID = 1\" would be coded as the S-expression \"(= ID"
 #" 1)\"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 98
(
 #"Currently only a subset of SQL is supported. Subqueries and existenc"
 #"e functions are not supported."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"join\""
0 0 24 3 2 #"]{"
0 0 20 3 15 #"The join clause"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"Join clauses can also included in "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 18 #"select-data-object"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 19 #"select-data-objects"
0 0 24 3 1 #"]"
0 0 20 3 16 #" functions. The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"join"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 35 #"clauses must be defined before the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"where"
0 0 24 3 1 #"]"
0 0 20 3 67
#" clause. There may be any number of join clauses, each expressing a"
0 0 24 29 1 #"\n"
0 0 20 3 49 #"join relationship, similar to an SQL join clause."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"A "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"join"
0 0 24 3 1 #"]"
0 0 20 3 33 #" clause may also be defined in a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 10 #"data-class"
0 0 24 3 1 #"]"
0 0 20 3 55 #" declaration, but is expressed in a slightly different "
0 0 24 29 1 #"\n"
0 0 20 3 10 #"form (see "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 11 #"data-class*"
0 0 24 3 1 #"]"
0 0 20 3 26 #" above. For instance, the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"join"
0 0 24 3 1 #"]"
0 0 20 3 56 #" clause, expresses the equivalant of the SQL-expression "
0 0 24 29 1 #"\n"
0 0 20 3 47 #"\"JOIN PERSON ON PERSON.ID = ADDRESS.PERSON_ID\"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"verbatim"
0 0 24 3 2 #"|{"
0 0 24 29 1 #"\n"
0 0 20 3 52 #"(join person% (= (person% id) (address% person-id)))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"}|"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"examples\""
0 0 24 3 2 #"]{"
0 0 20 3 12 #"RQL examples"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 90
(
 #"Below is an example of a manually defined data class map. This class"
 #" implements interface "
) 0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 12 #"my-interface"
0 0 28 3 1 #","
0 0 14 3 2 #"%>"
0 0 24 3 1 #"]"
0 0 20 3 13 #". It also has"
0 0 24 29 1 #"\n"
0 0 20 3 9 #"a column "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"x"
0 0 24 3 1 #"]"
0 0 20 3 106
(
 #" which is required to be specified when a new instance of the class "
 #"is created. There is also a one-to-one"
) 0 0 24 29 1 #"\n"
0 0 20 3 27 #"join to an object of class "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"object%"
0 0 24 3 1 #"]"
0 0 20 3 44 #" where the id column of the object equals 1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"verbatim"
0 0 24 3 2 #"|{"
0 0 24 29 1 #"\n"
0 0 20 3 56 #"(define my-class% (data-class* object% (my-interface<%>)"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 19 #"(table-name \"test\")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 28 #"(column [id #f (\"id\" \"Id\")] "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 20 3 26 #"[name #f (\"name\" \"Name\")] "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 20 3 29 #"[title #f (\"title\" \"Title\")])"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 27 #"(init-column [x (\"x\" \"X\")])"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 22 #"(join [object object% "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 20 3 26 #"#:cardinality 'one-to-one "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 20 3 20 #"(where (= id ?)) 1])"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 16 #"(primary-key id)"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 30 #"(define/public (test) (x + 1))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 20 3 13 #"(super-new)))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   }|"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 55 #"This creates an instance of the class above. Note that "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"x"
0 0 24 3 1 #"]"
0 0 20 3 19 #" must be specified."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"verbatim"
0 0 24 3 2 #"|{"
0 0 24 29 1 #"\n"
0 0 20 3 36 #"(define obj (new test-class% [x 2]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"}|"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 17 #"Generate a class "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 5 #"book%"
0 0 24 3 1 #"]"
0 0 20 3 75
(
 #" from the table Book in the Library database, with joins and reverse"
 #" joins."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"verbatim"
0 0 24 3 2 #"|{"
0 0 24 29 1 #"\n"
0 0 20 3 41 #"(define book% (gen-data-class con \"Book\" "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 20 3 23 #"#:schema-name \"Library\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 20 3 50 #"#:generate-joins? #t #:generate-reverse-joins? #t)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"}|"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"Because the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 8 #"#:print?"
0 0 24 3 1 #"]"
0 0 20 3 88
(
 #" keyword is true, this will return the SQL that would be used to sel"
 #"ect the objects from"
) 0 0 24 29 1 #"\n"
0 0 20 3 13 #"the database."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"verbatim"
0 0 24 3 2 #"|{"
0 0 24 29 1 #"\n"
0 0 20 3 74
(
 #"(select-data-objects con address% #:print? #t (where (in id ,address"
 #"-ids))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"}|"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"tips\""
0 0 24 3 2 #"]{"
0 0 20 3 20 #"Tips and suggestions"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"serialization\""
0 0 24 3 2 #"]{"
0 0 20 3 25 #"Data Object Serialization"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 19 #"data-object->jsexpr"
0 0 24 3 2 #" ["
0 0 14 3 6 #"object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 7 #"jsexpr?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 46 #"Serializes a data object into a JS-expression."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 19 #"jsexpr->data-object"
0 0 24 3 2 #" ["
0 0 14 3 3 #"jsx"
0 0 24 3 1 #" "
0 0 14 3 7 #"jsexpr?"
0 0 24 3 4 #"]) ("
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 50 #"Creates a data object from a JS-expression string."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"data-object->xexpr"
0 0 24 3 2 #" ["
0 0 14 3 6 #"object"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-object?"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"xexpr?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 46 #"Serializes a data object into an X-expression."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 18 #"xexpr->data-object"
0 0 24 3 2 #" ["
0 0 14 3 3 #"xml"
0 0 24 3 1 #" "
0 0 14 3 6 #"xexpr?"
0 0 24 3 4 #"]) ("
0 0 14 3 12 #"data-object?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 43 #"Creates a data object from an X-expression."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0           0
